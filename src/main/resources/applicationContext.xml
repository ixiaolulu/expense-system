<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
    <!--开启注解 @Controller @Service @Component-->
    <context:component-scan base-package="com.lulu.expense"/>

    <context:annotation-config />

    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!--数据源 BasicDataSource-->
   <!--
    1，spring自带数据源DriverManagerDataSource
    2，DBCP数据源BasicDataSource DBCP的配置依赖于2个jar包commons-dbcp.jar，commons-pool.jar。
    3，C3P0数据源C3P0 ComboPooledDataSource 是一个开放源代码的JDBC数据源实现项目，C3P0依赖于jar包c3p0.jar。
    4，JNDI数据源JndiObjectFactoryBean， 如果应用配置在高性能的应用服务器（如WebLogic或Websphere,tomcat等）上，我们可能更希望使用应用服务器本身提供的数据源。应用服务器的数据源
    使用JNDI开放调用者使用，Spring为此专门提供引用JNDI资源的JndiObjectFactoryBean类。
    -->
    <bean id="readDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${read.driver}" />
        <property name="url" value="${read.url}" />
        <property name="username" value="${read.username}" />
        <property name="password" value="${read.password}" />
        <property name="initialSize" value="${read.initialSize}"/>
        <property name="maxActive" value="${read.maxActive}"/>
        <property name="minIdle" value="${read.minIdle}"/>
        <property name="maxWait" value="${read.maxWait}"/>
    </bean>

    <bean id="writeDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${write.driver}" />
        <property name="url" value="${write.url}" />
        <property name="username" value="${write.username}" />
        <property name="password" value="${write.password}" />
        <property name="initialSize" value="${write.initialSize}"/>
        <property name="maxActive" value="${write.maxActive}"/>
        <property name="minIdle" value="${write.minIdle}"/>
        <property name="maxWait" value="${write.maxWait}"/>
    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="readSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg>
            <bean class = "org.mybatis.spring.SqlSessionFactoryBean">
                <property name="dataSource" ref="readDataSource"/>
                <property name="configLocation" value="classpath:mybatis-config.xml"/>
                <property name="typeAliasesPackage" value="com.lulu.expense.model.entity"/>
                <property name="mapperLocations" value="classpath:mapper/*.xml"/>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="writeSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg>
            <bean class = "org.mybatis.spring.SqlSessionFactoryBean">
                <property name="dataSource" ref="writeDataSource"/>
                <property name="configLocation" value="classpath:mybatis-config.xml"/>
                <property name="typeAliasesPackage" value="com.lulu.expense.model.entity"/>
                <property name="mapperLocations" value="classpath:mapper/*.xml"/>
            </bean>
        </constructor-arg>
    </bean>

    <!--基于注解的事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="writeDataSource"/>
    </bean>

    <!-- 事务在service的实现层使用注解定义，这里使用基于接口的代理实现 proxy-target-class=false 或者 默认不配置 -->
    <tx:annotation-driven transaction-manager="transactionManager" />


</beans>